{"version":3,"sources":["index.js"],"names":["DropDown","props","onChange","e","getId","name","id","options","map","o","i","key","WordCloud","useState","data","setData","date","setDate","newspaper","setNewsPaper","target","selectedOptions","textContent","useEffect","fetch","then","res","json","values","Object","val","catch","err","console","error","newspapers1","d","newspapersSet","Set","newspapers","Array","from","datesDirty","datesSet","dates","classname","filter","src","alt","ReactDOM","render","document","getElementById"],"mappings":"8NAIMA,G,MAAW,SAAAC,GACf,OACE,oCACE,4BAAQC,SAAU,SAAAC,GAAC,OAAIF,EAAMG,MAAMD,IAAIE,KAAK,YAAYC,GAAG,aACxDL,EAAMM,QAAQC,KAAI,SAACC,EAAGC,GAAJ,OACjB,4BAAQJ,GAAIL,EAAMK,GAAIK,IAAKD,GACxBD,UAQPG,EAAY,WAAO,IAAD,EACEC,mBAAS,IADX,mBACfC,EADe,KACTC,EADS,OAEEF,mBAAS,MAFX,mBAEfG,EAFe,KAETC,EAFS,OAGYJ,mBAAS,MAHrB,mBAGfK,EAHe,KAGJC,EAHI,KAKhBf,EAAQ,SAAAD,GAC2B,SAAnCA,EAAEiB,OAAOC,gBAAgB,GAAGf,GAC9BW,EAAQd,EAAEiB,OAAOC,gBAAgB,GAAGC,aAEpCH,EAAahB,EAAEiB,OAAOC,gBAAgB,GAAGC,cAG7CC,qBAAU,WACRC,MAAM,2DACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAX,GACJ,IAAMc,EAASC,OAAOD,OAAOd,GAC7BC,EAAQa,EAAOpB,KAAI,SAACsB,EAAKpB,GAAN,sBAAkBoB,EAAlB,CAAuBxB,GAAII,WAE/CqB,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,QAC7B,IAEH,IAAMG,EAAcrB,EAAKN,KAAI,SAAA4B,GAAC,OAAIA,EAAElB,aAC9BmB,EAAgB,IAAIC,IAAIH,GACxBI,EAAaC,MAAMC,KAAKJ,GACxBK,EAAa5B,EAAKN,KAAI,SAAA4B,GAAC,OAAIA,EAAEpB,QAC7B2B,EAAW,IAAIL,IAAII,GACnBE,EAAQJ,MAAMC,KAAKE,GACzB,OACE,yBAAKE,UAAU,OACb,kBAAC7C,EAAD,CAAUO,QAASgC,EAAYnC,MAAOA,EAAOE,GAAG,cAChD,kBAACN,EAAD,CAAUO,QAASqC,EAAOxC,MAAOA,EAAOE,GAAG,SAC1CQ,EACEgC,QAAO,SAAAV,GAAC,OAAIA,EAAEpB,OAASA,GAAQoB,EAAElB,YAAcA,KAC/CV,KAAI,SAAC4B,EAAG1B,GACP,OAAO,yBAAKC,IAAKD,EAAGqC,IAAKX,EAAE,YAAc,KAAMY,IAAI,mBAM7DC,IAASC,OAAO,kBAACtC,EAAD,MAAeuC,SAASC,eAAe,W","file":"static/js/main.3c3c8d89.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\n\nconst DropDown = props => {\n  return (\n    <>\n      <select onChange={e => props.getId(e)} name=\"wordcloud\" id=\"wordcloud\">\n        {props.options.map((o, i) => (\n          <option id={props.id} key={i}>\n            {o}\n          </option>\n        ))}\n      </select>\n    </>\n  )\n}\n\nconst WordCloud = () => {\n  const [data, setData] = useState([])\n  const [date, setDate] = useState(null)\n  const [newspaper, setNewsPaper] = useState(null)\n\n  const getId = e => {\n    if (e.target.selectedOptions[0].id === 'date') {\n      setDate(e.target.selectedOptions[0].textContent)\n    } else {\n      setNewsPaper(e.target.selectedOptions[0].textContent)\n    }\n  }\n  useEffect(() => {\n    fetch('https://secantsquared.github.io/democomponent/data.json')\n      .then(res => res.json())\n      .then(data => {\n        const values = Object.values(data)\n        setData(values.map((val, i) => ({ ...val, id: i })))\n      })\n      .catch(err => console.error(err))\n  }, [])\n\n  const newspapers1 = data.map(d => d.newspaper)\n  const newspapersSet = new Set(newspapers1)\n  const newspapers = Array.from(newspapersSet)\n  const datesDirty = data.map(d => d.date)\n  const datesSet = new Set(datesDirty)\n  const dates = Array.from(datesSet)\n  return (\n    <div classname=\"App\">\n      <DropDown options={newspapers} getId={getId} id=\"newspaper\" />\n      <DropDown options={dates} getId={getId} id=\"date\" />\n      {data\n        .filter(d => d.date === date && d.newspaper === newspaper)\n        .map((d, i) => {\n          return <img key={i} src={d['IMG URL'] || null} alt=\"wordcloud\" />\n        })}\n    </div>\n  )\n}\n\nReactDOM.render(<WordCloud />, document.getElementById('root'))\n"],"sourceRoot":""}